import sqlite3
import os


class Database:

    def __init__(self, name: str):
        self._route = os.path.join("./databases", name + ".sqlite")
        self._conn = sqlite3.connect(self._route)
        self._cursor = self._conn.cursor()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self._conn.commit()
        self._conn.close()

    # Database properties and general functions are defined below:

    @property
    def cursor(self):
        return self._cursor

    @property
    def connection(self):
        return self._conn

    def commit(self):
        self.connection.commit()

    def query(self, sql, params=None):
        self.cursor.execute(sql, params or ())

    # Table related database functions are defined below:

    def create_table(self):
        """Creates the database table according to schema if table not exist
        //Schema
            entities (Table):
                entity_id: Integer, as Primary Key, Auto-generated by SQLite
                entity_name: Text, required and unique, legal name of the entity
                tax_classification: Text, entity's tax classification
                tax_residence: Text, entity's tax residence
            relationships (Table):
                relationship_id: Integer, as Primary Key, Auto-generated by SQLite
                owner_id: Integer, required, references entity_id(entities)
                sub_id: Integer, required, references entity_id(entities)
                relationship: Text, defines type of relationship
                value_percentage: Float, defines percentage"""
        try:
            self._conn.execute("CREATE TABLE IF NOT EXISTS entities ("
                               "entity_id INTEGER PRIMARY KEY, "
                               "entity_name TEXT NOT NULL UNIQUE, "
                               "tax_classification TEXT, "
                               "tax_residence TEXT)")

            self._conn.execute("CREATE TABLE IF NOT EXISTS relationships ("
                               "relationship_id INTEGER PRIMARY KEY, "
                               "owner_id INTEGER NOT NULL, "
                               "owner_name TEXT NOT NULL, "
                               "sub_id INTEGER NOT NULL, "
                               "sub_name TEXT NOT NULL,"
                               "relationship TEXT,"
                               "value_percentage REAL NOT NULL)")

        except sqlite3.Error as e:
            print(e)

    # Entity related database functions are defined below:

    def get_entity_list(self):
        """Connects to the database and get a list of names of the entity"""

        self.query("SELECT entity_name "
                   "FROM entities "
                   "ORDER BY entity_name")
        try:
            record = self.cursor.fetchall()
            temp_list = list(x[0] for x in record)
            return temp_list
        except sqlite3.Error or TypeError:
            return None

    def get_id(self, e_name):
        """Connects to the database and get the entity id of the entity, based on entity name"""

        self.query("SELECT entity_id, entity_name "
                   "FROM entities "
                   "WHERE entity_name = ? "
                   "COLLATE NOCASE",
                   (e_name,))

        try:
            record, _ = self.cursor.fetchone()
            return record
        except TypeError:
            return None

    def get_name(self, e_id):
        """Connects to the database and get the entity name of the entity, based on entity id"""

        self.query("SELECT entity_id, entity_name "
                   "FROM entities "
                   "WHERE entity_id = ? "
                   "COLLATE NOCASE",
                   (e_id, ))
        try:
            _, record = self.cursor.fetchone()
            return record
        except TypeError:
            return None

    def get_info(self, e_name):
        """Connects to the database and get all info of the entity, based on entity name"""

        self.query("SELECT entity_id, entity_name, tax_classification, tax_residence "
                   "FROM entities "
                   "WHERE entity_name = ? "
                   "COLLATE NOCASE",
                   (e_name,))
        try:
            record = self.cursor.fetchone()
            return record
        except TypeError:
            return None

    def add_entity(self, entity_name, tax_classification, tax_residence):
        """Adds an entity to the sql database
        info_tuple should be (entity name, tax classification, entity residence), matching SQL schema"""

        if self.get_id(entity_name):

            self.query("UPDATE entities "
                       "SET entity_name = ?, tax_classification = ?, tax_residence = ? "
                       "WHERE entity_name = ?"
                       "COLLATE NOCASE",
                       (entity_name, tax_classification, tax_residence, entity_name))
            self.commit()
            print("Entity updated: {} ({} {})".format(entity_name, tax_residence, tax_classification))

        else:
            self.query("INSERT INTO entities "
                       "(entity_name, tax_classification, tax_residence)"
                       "VALUES (?, ?, ?)",
                       (entity_name, tax_classification, tax_residence))
            self.commit()
            print("Entity added: {} ({} {})".format(entity_name, tax_residence, tax_classification))

    def del_entity(self, e_name):
        """Remove the record of an existing entity based on entity name provided"""

        if self.get_id(e_name):
            self.query("DELETE FROM entities "
                       "WHERE entity_name = ? "
                       "COLLATE NOCASE",
                       (e_name, ))
            self.commit()
            print("Entity deleted: {}".format(e_name))
        else:
            print("No existing entity: {}".format(e_name))

    # Relationship related database functions are defined below:

    def get_relationship(self, owner_name, sub_name):
        """Check if a there is an existing relationship in the database, and return the record"""

        self.query("SELECT * "
                   "From relationships "
                   "WHERE owner_name = ? AND sub_name = ?",
                   (owner_name, sub_name))

        try:
            record = self.cursor.fetchone()
            return record
        except sqlite3.Error:
            return None

    def get_owners(self, entity_name):
        """Get all subsidiary of a entity using the entity's id"""

        self.query("SELECT owner_name, value_percentage "
                   "FROM relationships "
                   "WHERE sub_name = ? "
                   "ORDER BY owner_name",
                   (entity_name, ))

        record = self.cursor.fetchall()
        temp_list = [x for x in record]
        return temp_list

    def get_subs(self, entity_name):
        """Get all owner of an entity using the entity's id"""

        self.query("SELECT sub_name, value_percentage "
                   "FROM relationships "
                   "WHERE owner_name = ?"
                   "ORDER BY sub_name",
                   (entity_name, ))

        record = self.cursor.fetchall()
        temp_list = [x for x in record]
        return temp_list

    def add_relationship(self, owner_name, sub_name, relationship, percentage):
        """Check if relationship exists, if exists update the current relationship, if not, add new"""

        if self.get_relationship(owner_name, sub_name):
            self.query("UPDATE relationships "
                       "SET value_percentage = ?, relationship = ?"
                       "WHERE owner_name = ? AND sub_name = ?",
                       (percentage, relationship, owner_name, sub_name))
            self.commit()
            print("Relationship updated: {} -> {} {}%".format(owner_name, sub_name, percentage * 100))

        else:
            self.query("INSERT INTO relationships ("
                       "owner_id, owner_name, "
                       "sub_id, sub_name, "
                       "relationship, value_percentage)"
                       "VALUES (?, ?, ?, ?, ?, ?)",
                       (self.get_id(owner_name), owner_name,
                        self.get_id(sub_name), sub_name,
                        relationship, percentage))
            self.commit()
            print("Relationship added: {} -> {} {}%".format(owner_name, sub_name, percentage * 100))

    def del_relationship(self, owner_name, sub_name):
        """delete exiting relationship"""

        if self.get_relationship(owner_name, sub_name):
            self.query("DELETE FROM relationships "
                       "WHERE owner_name = ? AND sub_name = ?",
                       (owner_name, sub_name))
            self.commit()
            print("Relationship deleted: {} -> {}".format(owner_name, sub_name))

    def del_owners(self, sub_name):
        """delete all owners of a subsidiary"""

        self.query("DELETE FROM relationships "
                   "WHERE sub_name = ?",
                   (sub_name, ))
        self.commit()

    def del_subs(self, owner_name):
        """delete all subsidiaries of an owner"""

        self.query("DELETE FROM relationships "
                   "WHERE owner_name = ?",
                   (owner_name, ))
        self.commit()



